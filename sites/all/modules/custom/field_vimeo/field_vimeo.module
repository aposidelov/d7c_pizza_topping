<?php

define('VIMEO_URL_PATTERN_1', '@vimeo\.com/(.+)@i');

/**
 * Implements hook_field_info().
 */
function field_vimeo_field_info() {
  return array(
    'field_vimeo_type' => array(
      'label' => t('Vimeo'),
      'description' => t('Vimeo'),
      'default_widget' => 'field_vimeo_widget',
      'default_formatter' => 'field_vimeo_formatter',
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function field_vimeo_field_widget_info() {
  return array(
    'field_vimeo_widget' => array(
      'label' => t('Vimeo'),
      'field types' => array('field_vimeo_type'),
      'settings' => array('field_vimeo_size' => 60),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function field_vimeo_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $value = isset($items[$delta]['vimeo_id']) ? $items[$delta]['vimeo_id'] : '';
  $widget = $element;
  $widget['#delta'] = $delta;
  switch ($instance['widget']['type']) {
    case 'field_vimeo_widget':
      $widget += array(
        '#value_callback' => 'field_vimeo_convert_to_link_callback',
        '#element_validate' => array('field_vimeo_convert_to_id_validate'),
        '#title' => t('Vimeo link'),
        '#type' => 'textfield',
        '#default_value' => $value,
        '#size' => 50,
      );

      break;
  }
  $element['vimeo_id'] = $widget;

  return $element;
}


function field_vimeo_convert_to_link_callback($element, $input = FALSE, $form_state) {
  if (!$input) {
    if (isset($element['#default_value']) && !empty($element['#default_value'])) {
      return field_vimeo_parse_id_to_url($element['#default_value']);
    }
    return $element['#default_value'];
  }
}

/**
 * Validate + Update element value with Vimeo id (Vimeo url input)
 */
function field_vimeo_convert_to_id_validate($element, &$form_state) {
  $delta = $element['#delta'];
  $field = $form_state['field'][$element['#field_name']][$element['#language']]['field'];
  $field_name = $field['field_name'];
  if (isset($form_state['values'][$field_name][$element['#language']][$delta]['vimeo_id'])) {
    $vimeo_url = $form_state['values'][$field_name][$element['#language']][$delta]['vimeo_id'];
    if (empty($vimeo_url)) {
      return;
    }
    $valid = FALSE;
    $vimeo_id = '';
    // http://vimeo.com/*
    $patterns = array(
      VIMEO_URL_PATTERN_1
    );

    foreach ($patterns as $pattern) {
      preg_match($pattern, $vimeo_url, $matches);
      if (isset($matches[0]) && field_vimeo_is_valid_url($vimeo_url)) {
        $valid = TRUE;
      }
    }

    if (!$valid) {
      form_error($element,'Vimeo Url is not valid');
      return;
    } else {
      $vimeo_id = field_vimeo_get_id_by_url($vimeo_url);
    }
  }

  form_set_value($element, $vimeo_id, $form_state);
}

/**
 * Implements hook_field_widget_error().
 */
function field_vimeo_field_widget_error($element, $error) {
  switch ($error['error']) {
    case '':
       form_error($element, $error['message']);
    break;
  }
}

/**
 * Implements hook_field_schema().
 */
function field_vimeo_field_schema($field) {
  switch ($field['type']) {
    case 'field_vimeo_type':
      $columns = array(
        'vimeo_id' => array(
          'type' => 'int',
          'not null' => FALSE,
        ),
      );
      break;
  }

  return array('columns' => $columns);
}

/**
 * Implements hook_field_validate().
 */
function field_vimeo_field_validate($obj_type, $object, $field, $instance, $langcode, &$items, &$errors) {
  foreach ($items as $delta => $item) {
    if (isset($item['field_vimeo_type'])) {

    }
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function field_vimeo_field_formatter_info() {
  return array(
    'field_vimeo_formatter' => array(
      'label' => t('Default'),
      'field types' => array('field_vimeo_type'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function field_vimeo_field_formatter_view($object_type, $object, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  if ($display['type'] == 'field_vimeo_formatter') {
      foreach ($items as $delta => $item) {
        $vimeo_url = field_vimeo_parse_id_to_url($item['vimeo_id']);
        $vimeo_thumbnail = field_vimeo_get_thumbnail_by_id($item['vimeo_id']);
        $output = l(theme('image', array(
          'path' => $vimeo_thumbnail,
          'attributes' => array('width' => 100, 'height' => 100))
        ), $vimeo_url, array('html' => TRUE));
        $element[$delta] = array('#markup' => $output);
      }
  }

  return $element;
}

/**
 * Implements hook_field_is_empty().
 */
function field_vimeo_field_is_empty($item, $field) {
  switch ($field['type']) {
    case 'field_vimeo_type':
      return empty($item['vimeo_id']);
      break;
  }
}


/**
 * Get Vimeo Id by Vimeo Url.
 */
function field_vimeo_parse_url_to_id($vimeo_url) {
  // http://vimeo.com/*
  $vimeo_id = field_vimeo_get_id_by_url($vimeo_url);

  return $vimeo_id;
}

/**
 * Get Vimeo Url by Vimeo Id.
 */
function field_vimeo_parse_id_to_url($vimeo_id) {
  // http://vimeo.com/*
  return 'http://vimeo.com/'.$vimeo_id;
}

/**
 * Check if a Vimeo ID is valid.
 */
function field_vimeo_is_valid_id($vimeo_id) {
  $url = 'http://vimeo.com/'. $vimeo_id;
  $oembed_url = url('http://vimeo.com/api/oembed.json', array('query' => array('url' => $url)));
  $response = drupal_http_request($oembed_url, array('method' => 'HEAD'));

  if ($response->code == 401) {
    drupal_set_message(t('Embedding has been disabled for this Vimeo video.'));
    return FALSE;
  }
  elseif ($response->code != 200) {
    drupal_set_message(t('The Vimeo video ID is invalid or the video was deleted.'));
    return FALSE;
  }

  return TRUE;
}

/**
 * Check if a Vimeo Url is valid.
 */
function field_vimeo_is_valid_url($vimeo_url) {
  $oembed_url = url('http://vimeo.com/api/oembed.json', array('query' => array('url' => $vimeo_url)));
  $response = drupal_http_request($oembed_url, array('method' => 'HEAD'));
  if ($response->code == 401) {
    drupal_set_message(t('Embedding has been disabled for this Vimeo video.'));
    return FALSE;
  }
  elseif ($response->code != 200) {
    drupal_set_message(t('The Vimeo video ID is invalid or the video was deleted.'));
    return FALSE;
  }

  return TRUE;
}

/**
 * Get Vimeo Thumbnail by Vimeo Id.
 */
function field_vimeo_get_thumbnail_by_id($vimeo_id) {
  $url = 'http://vimeo.com/'. $vimeo_id;
  $oembed_url = url('http://vimeo.com/api/oembed.json', array('query' => array('url' => $url)));
  $response = drupal_http_request($oembed_url);
  if (!isset($response->error)) {
    watchdog('rsp2', '<pre>'.print_r($response, TRUE).'</pre>');
    $data = drupal_json_decode($response->data);
    watchdog('rsp3', '<pre>'.print_r($data, TRUE).'</pre>');
    return $data['thumbnail_url'];
  } else {
    drupal_set_message("Error Processing Request. (Error: {$response->code}, {$response->error})");
    return FALSE;
  }
}

/**
 * Get Vimeo Id by Vimeo Url.
 */
function field_vimeo_get_id_by_url($vimeo_url) {
  $oembed_url = url('http://vimeo.com/api/oembed.json', array('query' => array('url' => $vimeo_url)));
  $response = drupal_http_request($oembed_url);
  if (!isset($response->error)) {
    $data = drupal_json_decode($response->data);
    watchdog('dad', '<pre>'.print_r($data, TRUE).'</pre>');
    return $data['video_id'];
  } else {
    drupal_set_message("Error Processing Request. (Error: {$response->code}, {$response->error})");
    return FALSE;
  }
}
